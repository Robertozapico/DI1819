/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package digrafico.Interfaz;

import digrafico.Logica.GestionCSV;
import digrafico.Logica.LogicaAplicacion;
import static digrafico.Logica.LogicaAplicacion.getSdf;
import digrafico.Logica.MetodosGestionFicherosObjetos;
import digrafico.Modelo.Carrera;
import digrafico.Modelo.Participante;
import java.awt.Component;
import java.awt.Dialog;
import java.io.File;
import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import org.openide.util.Exceptions;
//añadir boton para borrar de la tabla
//añadir todos los metodos en una clase de logica

/**
 *
 * @author zapia
 */
public class ListadoCarreras extends javax.swing.JDialog {

    private LogicaAplicacion logicaMetodos;
    private GestionCSV gcsv = new GestionCSV();
    private MetodosGestionFicherosObjetos mgfo = new MetodosGestionFicherosObjetos();
    private JRDataSource dataSource;
    private Map parametros;
    private JasperPrint print;
//METER EL BOTON DE TERMINAR CARRERA EN LA VENTANA DE ESTADOCARRERA

    /**
     * Creates new form ListadoCarreras
     */
    public ListadoCarreras(java.awt.Frame parent, boolean modal, LogicaAplicacion logicaAplicacion) {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(this);
        this.logicaMetodos = logicaAplicacion;
        rellenarTablaCarreras();
    }

    public ListadoCarreras(Dialog owner, boolean modal, LogicaAplicacion logicaAplicacion) {
        super(owner, modal);
        initComponents();
        this.setLocationRelativeTo(this);
        this.logicaMetodos = logicaAplicacion;
        rellenarTablaCarreras();
    }

    private void rellenarTablaCarreras() {
        String[] columnas = {"Nombre", "Fecha", "Lugar", "Num Max Participantes", "Estado"};
        DefaultTableModel dtm = new DefaultTableModel(columnas, 0);
        String estado = "";
        for (Carrera carrera : logicaMetodos.getCarreras()) {
            estado = "";
            if (carrera.isCarreraTerminada()) {
                estado = "Terminada";
            } else {
                estado = "Por comenzar";
            }
            String[] a = new String[5];
            a[0] = carrera.getNombreDeCarrera();
            a[1] = getSdf().format(carrera.getFechaDeCarrera());
            a[2] = carrera.getLugarDeCarrera();
            a[3] = Integer.toString(carrera.getNumMaxParticipantes());
            a[4] = estado;
            dtm.addRow(a);
        }
        jTableCarreras.setModel(dtm);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableCarreras = new javax.swing.JTable();
        jButtonAltaCarrera = new javax.swing.JButton();
        jButtonCerrar = new javax.swing.JButton();
        jButtonModificarCarrera = new javax.swing.JButton();
        jButtonEliminarCarrera = new javax.swing.JButton();
        jButtonGestionCorredores = new javax.swing.JButton();
        jbComenzarCarrera = new javax.swing.JButton();
        jButtonExportarResultados = new javax.swing.JButton();
        jBInforme = new javax.swing.JButton();
        jBInformeFinalizada = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Listado Carreras");

        jTableCarreras.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Nombre", "Fecha", "Lugar", "Num Max Participantes", "Estado"
            }
        ));
        jScrollPane1.setViewportView(jTableCarreras);

        jButtonAltaCarrera.setText("Dar alta carrera");
        jButtonAltaCarrera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAltaCarreraActionPerformed(evt);
            }
        });

        jButtonCerrar.setText("Cerrar");
        jButtonCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCerrarActionPerformed(evt);
            }
        });

        jButtonModificarCarrera.setText("Modificar carrera");
        jButtonModificarCarrera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModificarCarreraActionPerformed(evt);
            }
        });

        jButtonEliminarCarrera.setText("Eliminar carrera");
        jButtonEliminarCarrera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarCarreraActionPerformed(evt);
            }
        });

        jButtonGestionCorredores.setText("Gestionar lista corredores");
        jButtonGestionCorredores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGestionCorredoresActionPerformed(evt);
            }
        });

        jbComenzarCarrera.setText("Comenzar carrera");
        jbComenzarCarrera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbComenzarCarreraActionPerformed(evt);
            }
        });

        jButtonExportarResultados.setText("Exportar resultados");
        jButtonExportarResultados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExportarResultadosActionPerformed(evt);
            }
        });

        jBInforme.setText("Imprimir informe carrera");
        jBInforme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBInformeActionPerformed(evt);
            }
        });

        jBInformeFinalizada.setText("Imprimir informe carrera Finalizada");
        jBInformeFinalizada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBInformeFinalizadaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonExportarResultados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonAltaCarrera, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbComenzarCarrera, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jButtonModificarCarrera)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonEliminarCarrera))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jBInforme, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jBInformeFinalizada, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonCerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButtonGestionCorredores, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(146, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(272, 272, 272)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAltaCarrera)
                    .addComponent(jButtonEliminarCarrera)
                    .addComponent(jButtonModificarCarrera))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonGestionCorredores)
                    .addComponent(jButtonExportarResultados))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jbComenzarCarrera)
                            .addComponent(jButtonCerrar)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jBInforme)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBInformeFinalizada)))
                .addGap(24, 24, 24))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAltaCarreraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAltaCarreraActionPerformed

        DialogAltaCarrera pantallaDeFormulario = new DialogAltaCarrera(this, true, logicaMetodos);
        pantallaDeFormulario.setVisible(true);
        File fichero = new File("gestionCarreras.dat");
        fichero.delete();
        mgfo.abrirFicheroEscrituraObjetos("gestionCarreras.dat");
        mgfo.grabarObjetoFicheroObjetos(logicaMetodos);
        mgfo.cerrarFicherosEscrituraObjetos();
        rellenarTablaCarreras();
    }//GEN-LAST:event_jButtonAltaCarreraActionPerformed

    private void jButtonModificarCarreraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModificarCarreraActionPerformed

        int carreraSeleccionada = jTableCarreras.getSelectedRow();
        if (jTableCarreras.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Selecciona una carrera", "Selecciona una carrera", JOptionPane.ERROR_MESSAGE);
        } else {
            Carrera carreraAModificar = logicaMetodos.getCarreras().get(carreraSeleccionada);
            DialogAltaCarrera pantallaDeFormulario = new DialogAltaCarrera(this, true, logicaMetodos, carreraAModificar);
            pantallaDeFormulario.setVisible(true);
            File fichero = new File("gestionCarreras.dat");
            fichero.delete();
            mgfo.abrirFicheroEscrituraObjetos("gestionCarreras.dat");
            mgfo.grabarObjetoFicheroObjetos(logicaMetodos);
            mgfo.cerrarFicherosEscrituraObjetos();
            rellenarTablaCarreras();
        }
    }//GEN-LAST:event_jButtonModificarCarreraActionPerformed

    private void jButtonCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCerrarActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonCerrarActionPerformed

    private void jButtonEliminarCarreraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarCarreraActionPerformed

        int carreraSeleccionada = jTableCarreras.getSelectedRow();
        if (jTableCarreras.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Selecciona una carrera", "Selecciona una carrera", JOptionPane.ERROR_MESSAGE);
        } else {
            Carrera carreraAModificar = logicaMetodos.getCarreras().get(carreraSeleccionada);
            logicaMetodos.eliminarCarrera(carreraAModificar);

            JOptionPane.showMessageDialog(this, "Carrera borrada");
            File fichero = new File("gestionCarreras.dat");
            fichero.delete();
            mgfo.abrirFicheroEscrituraObjetos("gestionCarreras.dat");
            mgfo.grabarObjetoFicheroObjetos(logicaMetodos);
            mgfo.cerrarFicherosEscrituraObjetos();
            rellenarTablaCarreras();
        }
    }//GEN-LAST:event_jButtonEliminarCarreraActionPerformed

    private void jButtonGestionCorredoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGestionCorredoresActionPerformed
        int carreraSeleccionada = jTableCarreras.getSelectedRow();
        if (jTableCarreras.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Selecciona una carrera", "Selecciona una carrera", JOptionPane.ERROR_MESSAGE);
        } else {
            ListadoCorredoresEnCarrera tablaCorredoresEnCarrera = new ListadoCorredoresEnCarrera(this, true, logicaMetodos, logicaMetodos.getCarreras().get(carreraSeleccionada));
            tablaCorredoresEnCarrera.setVisible(true);
        }
    }//GEN-LAST:event_jButtonGestionCorredoresActionPerformed

    private void jbComenzarCarreraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbComenzarCarreraActionPerformed

        int carreraSeleccionada = jTableCarreras.getSelectedRow();
        if (jTableCarreras.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Selecciona una carrera", "Selecciona una carrera", JOptionPane.ERROR_MESSAGE);
        } else {
            if (logicaMetodos.getCarreras().get(carreraSeleccionada).isCarreraTerminada()) {
                JOptionPane.showMessageDialog(this, "La carrera ya está terminada", "Carrera terminada", JOptionPane.ERROR_MESSAGE);
            } else {
                EstadoCarrera estadoCarrera = new EstadoCarrera(this, true, logicaMetodos.getCarreras().get(carreraSeleccionada), logicaMetodos);
                estadoCarrera.setVisible(true);

                rellenarTablaCarreras();
            }
            File fichero = new File("gestionCarreras.dat");
            fichero.delete();
            mgfo.abrirFicheroEscrituraObjetos("gestionCarreras.dat");
            mgfo.grabarObjetoFicheroObjetos(logicaMetodos);
            mgfo.cerrarFicherosEscrituraObjetos();
        }
    }//GEN-LAST:event_jbComenzarCarreraActionPerformed

    private void jButtonExportarResultadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExportarResultadosActionPerformed
        int carreraSeleccionada = jTableCarreras.getSelectedRow();
        if (jTableCarreras.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Selecciona una carrera", "Selecciona una carrera", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                gcsv.grabarFicheroCSVCarreras(logicaMetodos.getCarreras().get(carreraSeleccionada));
            } catch (ParseException ex) {
                Exceptions.printStackTrace(ex);
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
        rellenarTablaCarreras();
    }//GEN-LAST:event_jButtonExportarResultadosActionPerformed

    private void jBInformeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBInformeActionPerformed
        if (jTableCarreras.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Selecciona una carrera", "Selecciona una carrera", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                logicaMetodos.obtenerCarrera(jTableCarreras.getSelectedRow()).setListaParticipantes(new ArrayList<Participante>());
                for (Map.Entry<Integer, Participante> entry : logicaMetodos.obtenerCarrera(jTableCarreras.getSelectedRow()).getParticipantes().entrySet()) {
                    Participante value = entry.getValue();
                    logicaMetodos.obtenerCarrera(jTableCarreras.getSelectedRow()).getListaParticipantes().add(value);
                }
                List<Carrera> carreraEscogida = new ArrayList<Carrera>();
                carreraEscogida.add(logicaMetodos.obtenerCarrera(jTableCarreras.getSelectedRow()));
                dataSource = new JRBeanCollectionDataSource(carreraEscogida);
                parametros = new HashMap();
                parametros.put("NumCorredores", logicaMetodos.obtenerCarrera(jTableCarreras.getSelectedRow()).getParticipantes().size() + "");
                print = JasperFillManager.fillReport("reports/jasper/reportCarreras.jasper", parametros, dataSource);
                JasperExportManager.exportReportToPdfFile(print, fileChooser(this)
                        + File.separator + "listaCarreras" + ".pdf");
                JOptionPane.showMessageDialog(this, "Informe guardado con éxito");
            } catch (JRException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }//GEN-LAST:event_jBInformeActionPerformed

    private void jBInformeFinalizadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBInformeFinalizadaActionPerformed
                if (jTableCarreras.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Selecciona una carrera", "Selecciona una carrera", JOptionPane.ERROR_MESSAGE);
        } else if(!logicaMetodos.getCarreras().get(jTableCarreras.getSelectedRow()).isCarreraTerminada())
        {
            JOptionPane.showMessageDialog(this, "Selecciona una carrera terminada", "Selecciona una carrera terminada", JOptionPane.ERROR_MESSAGE);
        }else {
            try {
                //
                logicaMetodos.obtenerCarrera(jTableCarreras.getSelectedRow()).setListaParticipantes(new ArrayList<Participante>());
                for (Map.Entry<Integer, Participante> entry : logicaMetodos.obtenerCarrera(jTableCarreras.getSelectedRow()).getParticipantes().entrySet()) {
                    Participante value = entry.getValue();
                    logicaMetodos.obtenerCarrera(jTableCarreras.getSelectedRow()).getListaParticipantes().add(value);
                }
                List<Carrera> carreraEscogida = new ArrayList<Carrera>();
                carreraEscogida.add(logicaMetodos.obtenerCarrera(jTableCarreras.getSelectedRow()));
                dataSource = new JRBeanCollectionDataSource(carreraEscogida);
                parametros = new HashMap();
                parametros.put("NumCorredores", logicaMetodos.obtenerCarrera(jTableCarreras.getSelectedRow()).getParticipantes().size() + "");
                print = JasperFillManager.fillReport("reports/jasper/reportCarrerasTerminadas.jasper", parametros, dataSource);
                JasperExportManager.exportReportToPdfFile(print, fileChooser(this)
                        + File.separator + "listaCarrerasTerminadas" + ".pdf");
                JOptionPane.showMessageDialog(this, "Informe guardado con éxito");
            } catch (JRException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }//GEN-LAST:event_jBInformeFinalizadaActionPerformed

    public String fileChooser(Component pantalla) {
        File file = null;
        JFileChooser jc = new JFileChooser();
        this.setLocationRelativeTo(null);
        jc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int seleccion = jc.showOpenDialog(pantalla);
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            file = jc.getSelectedFile();
        }
        return file.getAbsolutePath();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBInforme;
    private javax.swing.JButton jBInformeFinalizada;
    private javax.swing.JButton jButtonAltaCarrera;
    private javax.swing.JButton jButtonCerrar;
    private javax.swing.JButton jButtonEliminarCarrera;
    private javax.swing.JButton jButtonExportarResultados;
    private javax.swing.JButton jButtonGestionCorredores;
    private javax.swing.JButton jButtonModificarCarrera;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableCarreras;
    private javax.swing.JButton jbComenzarCarrera;
    // End of variables declaration//GEN-END:variables
}
