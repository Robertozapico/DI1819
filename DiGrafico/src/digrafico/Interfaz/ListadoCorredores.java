/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package digrafico.Interfaz;

import digrafico.Logica.GestionCSV;
import digrafico.Logica.LogicaAplicacion;
import static digrafico.Logica.LogicaAplicacion.getSdf;
import digrafico.Logica.MetodosGestionFicherosObjetos;
import digrafico.Modelo.Carrera;
import digrafico.Modelo.Corredor;
import digrafico.Modelo.Participante;
import java.awt.Component;
import java.awt.Dialog;
import java.io.File;
import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import org.openide.util.Exceptions;

/**
 *
 * @author alumnop
 */
public class ListadoCorredores extends javax.swing.JDialog {

    private LogicaAplicacion logicaMetodos;
    private GestionCSV gcsv = new GestionCSV();
    private MetodosGestionFicherosObjetos mgfo = new MetodosGestionFicherosObjetos();
    private JRDataSource dataSource;
    private Map parametros;
    private JasperPrint print;

    /**
     * Creates new form ListadoCorredores
     */
    public ListadoCorredores(java.awt.Frame parent, boolean modal, LogicaAplicacion logicaAplicacion) {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(this);
        this.logicaMetodos = logicaAplicacion;
        rellenarTablaCorredores();

    }

    public ListadoCorredores(Dialog owner, boolean modal, LogicaAplicacion logicaAplicacion) {
        super(owner, modal);
        initComponents();
        this.setLocationRelativeTo(this);
        this.logicaMetodos = logicaAplicacion;
        rellenarTablaCorredores();

    }

    private void rellenarTablaCorredores() {
        String[] columnas = {"Nombre", "Dni", "Fecha de nacimiento", "Dirección", "Teléfono"};
        DefaultTableModel dtm = new DefaultTableModel(columnas, 0);
        for (Corredor corredor : logicaMetodos.getCorredores()) {
            //String[] a = new String[]{alumno.getNombre(),
            //                          alumno.getCurso()};
            String[] a = new String[5];
            a[0] = corredor.getNombre();
            a[1] = corredor.getDni();
            a[2] = getSdf().format(corredor.getFechaNacimiento());
            a[3] = corredor.getDireccion();
            a[4] = Integer.toString(corredor.getTelefono());
            dtm.addRow(a);
        }
        jTableCorredores.setModel(dtm);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableCorredores = new javax.swing.JTable();
        jLabelListado = new javax.swing.JLabel();
        jButtonDarAltaCorredor = new javax.swing.JButton();
        jButtonCerrar = new javax.swing.JButton();
        jButtonModificar = new javax.swing.JButton();
        jButtonEliminarCorredor = new javax.swing.JButton();
        jButtonImportarCorredores = new javax.swing.JButton();
        jBInforme = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTableCorredores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Nombre", "Dni", "Fecha de Nacimiento", "Dirección", "Teléfono"
            }
        ));
        jTableCorredores.setToolTipText("");
        jScrollPane2.setViewportView(jTableCorredores);

        jLabelListado.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabelListado.setText("Listado Corredores");

        jButtonDarAltaCorredor.setText("Dar alta al corredor");
        jButtonDarAltaCorredor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDarAltaCorredorActionPerformed(evt);
            }
        });

        jButtonCerrar.setText("Cerrar");
        jButtonCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCerrarActionPerformed(evt);
            }
        });

        jButtonModificar.setText("Modificar");
        jButtonModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModificarActionPerformed(evt);
            }
        });

        jButtonEliminarCorredor.setText("Eliminar Corredor");
        jButtonEliminarCorredor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarCorredorActionPerformed(evt);
            }
        });

        jButtonImportarCorredores.setText("Importar corredores");
        jButtonImportarCorredores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImportarCorredoresActionPerformed(evt);
            }
        });

        jBInforme.setText("Informe");
        jBInforme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBInformeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 739, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButtonDarAltaCorredor, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonModificar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonImportarCorredores)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jBInforme)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonEliminarCorredor)
                                .addGap(44, 44, 44)
                                .addComponent(jButtonCerrar))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(308, 308, 308)
                        .addComponent(jLabelListado, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(104, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabelListado, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDarAltaCorredor)
                    .addComponent(jButtonCerrar)
                    .addComponent(jButtonModificar)
                    .addComponent(jButtonEliminarCorredor)
                    .addComponent(jButtonImportarCorredores)
                    .addComponent(jBInforme))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonDarAltaCorredorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDarAltaCorredorActionPerformed

        DialogAltaCorredor pantallaDeFormulario = new DialogAltaCorredor(this, true, logicaMetodos);
        pantallaDeFormulario.setVisible(true);
        File fichero = new File("gestionCarreras.dat");
        fichero.delete();
        mgfo.abrirFicheroEscrituraObjetos("gestionCarreras.dat");
        mgfo.grabarObjetoFicheroObjetos(logicaMetodos);
        mgfo.cerrarFicherosEscrituraObjetos();
        rellenarTablaCorredores();
        try {
            gcsv.grabarFicheroCSVCorredores(logicaMetodos.getCorredores());
        } catch (ParseException ex) {
            Exceptions.printStackTrace(ex);
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_jButtonDarAltaCorredorActionPerformed

    private void jButtonCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCerrarActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonCerrarActionPerformed

    private void jButtonModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModificarActionPerformed

        int corredorSeleccionado = jTableCorredores.getSelectedRow();
        if (jTableCorredores.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Selecciona un corredor", "Selecciona un corredor", JOptionPane.ERROR_MESSAGE);
        } else {
            Corredor corredorAModificar = logicaMetodos.getCorredores().get(corredorSeleccionado);
            DialogAltaCorredor pantallaDeFormulario = new DialogAltaCorredor(this, true, logicaMetodos, corredorAModificar);
            pantallaDeFormulario.setVisible(true);
            File fichero = new File("gestionCarreras.dat");
            fichero.delete();
            mgfo.abrirFicheroEscrituraObjetos("gestionCarreras.dat");
            mgfo.grabarObjetoFicheroObjetos(logicaMetodos);
            mgfo.cerrarFicherosEscrituraObjetos();
            rellenarTablaCorredores();
            try {
                gcsv.grabarFicheroCSVCorredores(logicaMetodos.getCorredores());
            } catch (ParseException ex) {
                Exceptions.printStackTrace(ex);
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }//GEN-LAST:event_jButtonModificarActionPerformed

    private void jButtonEliminarCorredorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarCorredorActionPerformed

        int corredorSeleccionado = jTableCorredores.getSelectedRow();
        if (jTableCorredores.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Selecciona un corredor", "Selecciona un corredor", JOptionPane.ERROR_MESSAGE);
        } else {
            Corredor corredorAModificar = logicaMetodos.getCorredores().get(corredorSeleccionado);
            logicaMetodos.borrarCorredoresDeTodasLasCarreras(corredorAModificar);
            logicaMetodos.eliminarCorredor(corredorAModificar);

            JOptionPane.showMessageDialog(this, "Corredor borrado");
            File fichero = new File("gestionCarreras.dat");
            fichero.delete();
            mgfo.abrirFicheroEscrituraObjetos("gestionCarreras.dat");
            mgfo.grabarObjetoFicheroObjetos(logicaMetodos);
            mgfo.cerrarFicherosEscrituraObjetos();
            rellenarTablaCorredores();
            try {
                gcsv.grabarFicheroCSVCorredores(logicaMetodos.getCorredores());
            } catch (ParseException ex) {
                Exceptions.printStackTrace(ex);
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }//GEN-LAST:event_jButtonEliminarCorredorActionPerformed

    private void jButtonImportarCorredoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImportarCorredoresActionPerformed
        try {
            File fichero = logicaMetodos.escogerFichero(this);
            gcsv.annadirListaCorredores(logicaMetodos.getCorredores(), fichero.getAbsolutePath());
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        } catch (ParseException ex) {
            Exceptions.printStackTrace(ex);
        }
        JOptionPane.showMessageDialog(this, "Corredores importados");
        File fichero = new File("gestionCarreras.dat");
        fichero.delete();
        mgfo.abrirFicheroEscrituraObjetos("gestionCarreras.dat");
        mgfo.grabarObjetoFicheroObjetos(logicaMetodos);
        mgfo.cerrarFicherosEscrituraObjetos();
        rellenarTablaCorredores();
    }//GEN-LAST:event_jButtonImportarCorredoresActionPerformed

    private void jBInformeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBInformeActionPerformed
        if (jTableCorredores.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Selecciona un corredor", "Selecciona un corredor", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                /*logicaMetodos.obtenerCarrera(jTableCorredores.getSelectedRow()).setListaParticipantes(new ArrayList<Participante>());
                for (Map.Entry<Integer, Participante> entry : logicaMetodos.obtenerCarrera(jTableCorredores.getSelectedRow()).getParticipantes().entrySet()) {
                    Participante value = entry.getValue();
                    logicaMetodos.obtenerCarrera(jTableCorredores.getSelectedRow()).getListaParticipantes().add(value);
                }
                List<Corredor> corredorEscogido = new ArrayList<Corredor>();
                corredorEscogido.add(logicaMetodos.getCorredores().get(jTableCorredores.getSelectedRow()));*/

                //dataSource = new JRBeanCollectionDataSource(logicaMetodos.obtenerCarrerasNoFinalizadas());
                List<Carrera> carrerasCorredor = logicaMetodos.obtenerDatosCorredor(jTableCorredores.getSelectedRow());
                if (carrerasCorredor.size() < 1 || carrerasCorredor == null) {
                    System.out.println("Este corredor no participa en ninguna carrera");
                } else {
                    dataSource = new JRBeanCollectionDataSource(carrerasCorredor);
                    parametros = new HashMap();
                    parametros.put("nombre", logicaMetodos.getCorredores().get(jTableCorredores.getSelectedRow()).getNombre()+ "");
                    parametros.put("dni", logicaMetodos.getCorredores().get(jTableCorredores.getSelectedRow()).getDni()+ "");
                    parametros.put("fechaNac", logicaMetodos.getCorredores().get(jTableCorredores.getSelectedRow()).getFechaNacimiento()+ "");
                    parametros.put("tel", logicaMetodos.getCorredores().get(jTableCorredores.getSelectedRow()).getTelefono()+ "");
                    parametros.put("dir", logicaMetodos.getCorredores().get(jTableCorredores.getSelectedRow()).getDireccion()+ "");
                    
                    print = JasperFillManager.fillReport("reports/jasper/reportCorredor.jasper", parametros, dataSource);
                    JasperExportManager.exportReportToPdfFile(print, fileChooser(this)
                            + File.separator + "informeCorredor" + ".pdf");
                    JOptionPane.showMessageDialog(this, "Informe guardado con éxito");
                }
            } catch (JRException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }//GEN-LAST:event_jBInformeActionPerformed
    public String fileChooser(Component pantalla) {
        File file = null;
        JFileChooser jc = new JFileChooser();
        this.setLocationRelativeTo(null);
        jc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int seleccion = jc.showOpenDialog(pantalla);
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            file = jc.getSelectedFile();
        }
        return file.getAbsolutePath();
    }
    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBInforme;
    private javax.swing.JButton jButtonCerrar;
    private javax.swing.JButton jButtonDarAltaCorredor;
    private javax.swing.JButton jButtonEliminarCorredor;
    private javax.swing.JButton jButtonImportarCorredores;
    private javax.swing.JButton jButtonModificar;
    private javax.swing.JLabel jLabelListado;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableCorredores;
    // End of variables declaration//GEN-END:variables
}
